using Terraria;
using Terraria.ID;
using Terraria.ModLoader;

namespace YourMod.Items
{
    public class TSword : ModItem
    {
        public override void SetStaticDefaults()
        {
            DisplayName.SetDefault("T Sword");
            Tooltip.SetDefault("A sword forged with strong metals and wood.");
        }

        public override void SetDefaults()
        {
            item.damage = 15; // Set damage to 15
            item.melee = true; // It's a melee weapon
            item.width = 40;
            item.height = 40;
            item.useTime = 20; // Attack speed
            item.useAnimation = 20;
            item.useStyle = ItemUseStyleID.SwingThrow; // Standard sword swing
            item.knockBack = 5; // Moderate knockback
            item.value = Item.sellPrice(gold: 1); // Sell price in gold
            item.rare = ItemRarityID.Green; // Rarity color
            item.UseSound = SoundID.Item1; // Swing sound
        }

        public override void AddRecipes()
        {
            ModRecipe recipe = new ModRecipe(mod);
            recipe.AddRecipeGroup("MythrilOrichalcumBar", 3); // 3 Mythril/Orichalcum Bars
            recipe.AddRecipeGroup("IronBar", 2); // 2 Iron/Lead Bars
            recipe.AddRecipeGroup("Wood", 2); // 2 of any Wood
            recipe.AddTile(TileID.MythrilAnvil); // Crafted at Mythril/Orichalcum Anvil
            recipe.SetResult(this);
            recipe.AddRecipe();
        }
    }
}
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;
using System.Linq;

namespace YourMod.NPCs
{
    [AutoloadHead]
    public class Conner : ModNPC
    {
        public override void SetStaticDefaults()
        {
            DisplayName.SetDefault("Conner");
            Main.npcFrameCount[npc.type] = 25; // Standard town NPC frames
        }

        public override void SetDefaults()
        {
            npc.townNPC = true;
            npc.friendly = true;
            npc.width = 18;
            npc.height = 40;
            npc.aiStyle = 7; // Town NPC AI
            npc.damage = 10;
            npc.defense = 15;
            npc.lifeMax = 250;
            npc.HitSound = SoundID.NPCHit1;
            npc.DeathSound = SoundID.NPCDeath1;
            npc.knockBackResist = 0.5f;
        }

        public override bool CanTownNPCSpawn(int numTownNPCs, int money)
        {
            // Spawns after any invasion has been defeated
            return NPC.downedGoblins || NPC.downedPirates || NPC.downedMartians;
        }

        public override string GetChat()
        {
            string[] dialogue = {
                "Survived another raid, huh? I like that.",
                "Need some iron? I always keep some in stock during battle.",
                "You ever wonder what would happen if time just... stopped?"
            };

            if (NPC.downedMechBossAny) 
            {
                return "Youâ€™ve beaten the machines, but are you ready for a real fight?";
            }

            return Main.rand.Next(dialogue);
        }

        public override void SetChatButtons(ref string button, ref string button2)
        {
            button = "Shop";

            if (NPC.downedMechBoss3 && NPC.downedMechBoss2 && NPC.downedMechBoss1)
            {
                button2 = "Challenge"; // Option to fight after defeating all mech bosses
            }
        }

        public override void OnChatButtonClicked(bool firstButton, ref bool shop)
        {
            if (firstButton)
            {
                shop = true;
            }
            else
            {
                if (Main.LocalPlayer.HasBuff(BuffID.Battle))
                {
                    Main.npcChatText = "You're already fighting, finish what you started!";
                }
                else
                {
                    Main.npcChatText = "Let's see what you're made of!";
                    StartBattleEvent();
                }
            }
        }

        public override void SetupShop(Chest shop, ref int nextSlot)
        {
            shop.item[nextSlot].SetDefaults(ItemID.IronBar); // Sells Iron Bars
            nextSlot++;

            if (Main.invasionType != 0) 
            {
                shop.item[nextSlot].SetDefaults(ModContent.ItemType<ChronoSeal>()); // Sells Chrono Seal during invasions
                nextSlot++;
            }
        }

        private void StartBattleEvent()
        {
            NPC.SpawnOnPlayer(Main.myPlayer, NPCID.GoblinSummoner); // Example boss spawn, modify as needed
        }
    }
}
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;

namespace YourMod.Items
{
    public class ChronoSeal : ModItem
    {
        public override void SetStaticDefaults()
        {
            DisplayName.SetDefault("Chrono Seal");
            Tooltip.SetDefault("A mystical seal that freezes time for 5 seconds.");
        }

        public override void SetDefaults()
        {
            item.width = 20;
            item.height = 20;
            item.useTime = 20;
            item.useAnimation = 20;
            item.useStyle = ItemUseStyleID.HoldingUp;
            item.value = Item.sellPrice(silver: 50);
            item.rare = ItemRarityID.LightRed;
            item.consumable = true; // One-time use
        }

        public override bool UseItem(Player player)
        {
            if (Main.netMode != NetmodeID.MultiplayerClient)
            {
                FreezeEnemies();
            }
            return true;
        }

        private void FreezeEnemies()
        {
            foreach (NPC npc in Main.npc.Where(n => n.active && !n.boss))
            {
                npc.AddBuff(BuffID.Frozen, 300); // 5 seconds freeze
            }
        }

        public override void AddRecipes()
        {
            ModRecipe recipe = new ModRecipe(mod);
            recipe.AddIngredient(ItemID.FallenStar, 3);
            recipe.AddIngredient(ItemID.SoulofNight, 5);
            recipe.AddTile(TileID.MythrilAnvil);
            recipe.SetResult(this);
            recipe.AddRecipe();
        }
    }
}
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;

namespace YourMod.NPCs
{
    public class GuideShop : GlobalNPC
    {
        public override void SetupShop(int type, Chest shop, ref int nextSlot)
        {
            if (type == NPCID.Guide) // Modify Guide's shop
            {
                if (NPC.downedBoss1) // Eye of Cthulhu defeated
                {
                    shop.item[nextSlot].SetDefaults(ItemID.SuspiciousLookingEye);
                    nextSlot++;
                }

                if (NPC.downedBoss2) // Eater of Worlds/Brain of Cthulhu defeated
                {
                    if (WorldGen.crimson)
                    {
                        shop.item[nextSlot].SetDefaults(ItemID.BloodySpine); // Crimson world
                    }
                    else
                    {
                        shop.item[nextSlot].SetDefaults(ItemID.WormFood); // Corruption world
                    }
                    nextSlot++;
                }

                if (NPC.downedBoss3) // Skeletron defeated
                {
                    shop.item[nextSlot].SetDefaults(ItemID.ClothierVoodooDoll);
                    nextSlot++;
                }

                if (NPC.downedQueenBee) // Queen Bee defeated
                {
                    shop.item[nextSlot].SetDefaults(ItemID.Abeemination);
                    nextSlot++;
                }
            }
        }
    }
}
class ArmorSet:
    def __init__(self, name, required_class, armor_percentage, summoner_bonus=0, ranger_bonus=0):
        self.name = name
        self.required_class = required_class
        self.armor_percentage = armor_percentage
        self.summoner_bonus = summoner_bonus
        self.ranger_bonus = ranger_bonus

    def apply_set_bonus(self, player_class, player_summons):
        if player_class == self.required_class:
            if player_class == "Summoner":
                player_summons += self.summoner_bonus
                print(f"Summoner Class: +{self.summoner_bonus} summons applied.")
            if player_class == "Ranger":
                print(f"Ranger Class: Bonus applied.")
            print(f"Armor Set Active: {self.armor_percentage}% armor.")
        else:
            print("This Armor Set does not apply to your class.")

class Player:
    def __init__(self, player_class, summons=0):
        self.player_class = player_class
        self.summons = summons

    def equip_armor(self, armor_set):
        armor_set.apply_set_bonus(self.player_class, self.summons)

class CraftingRecipe:
    def __init__(self, item_name, required_materials):
        self.item_name = item_name
        self.required_materials = required_materials

    def craft(self, inventory):
        for material, amount in self.required_materials.items():
            if inventory.get(material, 0) < amount:
                print(f"Not enough {material}. Needed {amount}, have {inventory.get(material, 0)}.")
                return False
        for material, amount in self.required_materials.items():
            inventory[material] -= amount
        print(f"{self.item_name} crafted successfully!")
        return True

# Crafting recipe for the T Armor Set (Chest and Helmet)
t_armor_chest_helmet_recipe = CraftingRecipe(
    "T Armor Chest/Helmet", 
    {"Orichalcum Bar": 7, "Iron": 2, "Cobalt": 2}
)

# Crafting recipe for the T Armor Set (Leggings)
t_armor_leggings_recipe = CraftingRecipe(
    "T Armor Leggings", 
    {"Orichalcum Bar": 2, "Iron": 2, "Cobalt": 2}
)

# Example inventory (player's crafting materials)
inventory = {
    "Orichalcum Bar": 10,
    "Iron": 5,
    "Cobalt": 5,
}

# Example player who is a Summoner
player = Player(player_class="Summoner")

# Crafting and equipping the T Armor Set
if t_armor_chest_helmet_recipe.craft(inventory):
    chest_helmet = ArmorSet("T Armor Chest/Helmet", "Summoner", 56, summoner_bonus=5)
    player.equip_armor(chest_helmet)

if t_armor_leggings_recipe.craft(inventory):
    leggings = ArmorSet("T Armor Leggings", "Summoner", 56, summoner_bonus=5)
    player.equip_armor(leggings)
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;
using Microsoft.Xna.Framework;
using System.Collections.Generic;

namespace YourMod.NPCs
{
    public class Maxine : ModNPC
    {
        private bool secondPhase = true; // Phase 2 trigger
        private bool thirdPhase = false;  // Phase 3 (Expert/Master only)
        
        public override void SetDefaults()
        {
            npc.width = 48;
            npc.height = 64;
            npc.lifeMax = Main.expertMode ? 4500 : Main.masterMode ? 8300 : 3400;
            npc.damage = 10;
            npc.defense = 8;
            npc.knockBackResist = 0.1f;
            npc.aiStyle = -1; // Custom AI
            npc.boss = true;
            npc.npcSlots = 5f;
            npc.value = Item.buyPrice(0, 15, 0, 0); // Drops 15 Gold Coins
            npc.lavaImmune = true;
            npc.noTileCollide = false;
            npc.noGravity = false;
            npc.HitSound = SoundID.NPCHit1;
            npc.DeathSound = SoundID.NPCDeath6;
            music = MusicID.Boss1;
        }

        public override void AI()
        {
            if (npc.life < npc.lifeMax * 0.5f && !secondPhase) 
            {
                EnterSecondPhase();
            }

            if (Main.masterMode && npc.life < npc.lifeMax * 0.25f && !thirdPhase) 
            {
                EnterThirdPhase();
            }

            if (!secondPhase)
            {
                PhaseOneAI();
            }
            else if (secondPhase && !thirdPhase)
            {
                PhaseTwoAI();
            }
            else
            {
                PhaseThreeAI();
            }
        }

        private void PhaseOneAI()
        {
            if (Main.rand.NextBool(100)) 
            {
                NPC.NewNPC((int)npc.position.X + Main.rand.Next(-50, 50), (int)npc.position.Y, NPCID.Skeleton); // Summons minions
            }

            if (Main.rand.NextBool(150)) 
            {
                Projectile.NewProjectile(npc.position, new Vector2(0, 10), ProjectileID.Rock, 16, 2f); // Debris of Staff attack
            }
        }

        private void EnterSecondPhase()
        {
            secondPhase = true;
            npc.defense += 5;
            npc.damage += 5;
            npc.netUpdate = true;
            Main.NewText("Maxine: 'That's good, alright, we'll keep fightin'!'", Color.Orange);
            Main.NewText("Conner: 'You can do this, this is what we trained for!'", Color.Green);
        }

        private void PhaseTwoAI()
        {
            if (Main.rand.NextBool(120))
            {
                Projectile.NewProjectile(npc.position, new Vector2(5, 0), ModContent.ProjectileType<ClubHubProjectile>(), 20, 3f);
            }

            if (Main.rand.NextBool(100))
            {
                for (int i = 0; i < 5; i++) 
                {
                    Vector2 daggerVelocity = new Vector2(Main.rand.NextFloat(-5f, 5f), Main.rand.NextFloat(-5f, 5f));
                    Projectile.NewProjectile(npc.position, daggerVelocity, ProjectileID.ThrowingKnife, Main.expertMode ? 8 : 5, 1f);
                }
            }
        }

        private void EnterThirdPhase()
        {
            thirdPhase = true;
            npc.defense += 10;
            npc.damage += 10;
            npc.netUpdate = true;
            Main.NewText("Maxine is getting more aggressive!", Color.Red);
        }

        private void PhaseThreeAI()
        {
            if (Main.rand.NextBool(80))
            {
                for (int i = 0; i < 3; i++)
                {
                    Vector2 clubVelocity = new Vector2(Main.rand.NextFloat(-7f, 7f), Main.rand.NextFloat(-7f, 7f));
                    Projectile.NewProjectile(npc.position, clubVelocity, ModContent.ProjectileType<ClubHubProjectile>(), 25, 3f);
                }
            }

            if (Main.rand.NextBool(60))
            {
                for (int i = 0; i < 8; i++)
                {
                    Vector2 daggerVelocity = new Vector2(Main.rand.NextFloat(-6f, 6f), Main.rand.NextFloat(-6f, 6f));
                    Projectile.NewProjectile(npc.position, daggerVelocity, ProjectileID.ThrowingKnife, 10, 1f);
                }
            }
        }

        public override void NPCLoot()
        {
            Item.NewItem(npc.getRect(), ModContent.ItemType<ClubHub>());
            Item.NewItem(npc.getRect(), ModContent.ItemType<ColesPicture>());
            Item.NewItem(npc.getRect(), ModContent.ItemType<DebrisOfStaff>());
            Item.NewItem(npc.getRect(), ItemID.GoldCoin, 15);

            if (Main.expertMode || Main.masterMode)
            {
                Item.NewItem(npc.getRect(), ModContent.ItemType<AwardTrophy>());
            }
        }
    }
}
using Terraria;
using Terraria.ModLoader;
using Terraria.ID;

namespace YourMod.Items
{
    public class AwardTrophy : ModItem
    {
        public override void SetDefaults()
        {
            item.width = 24;
            item.height = 30;
            item.maxStack = 1;
            item.rare = ItemRarityID.Expert;
            item.value = Item.buyPrice(gold: 10);
        }
    }
}
using Terraria;
using Terraria.ModLoader;
using Terraria.ID;
using Microsoft.Xna.Framework;

namespace YourMod.Projectiles
{
    public class ClubHubProjectile : ModProjectile
    {
        public override void SetDefaults()
        {
            projectile.width = 32;
            projectile.height = 32;
            projectile.friendly = false;
            projectile.hostile = true;
            projectile.tileCollide = false;
            projectile.ignoreWater = true;
            projectile.aiStyle = 1;
            projectile.damage = 20;
        }
    }
}
